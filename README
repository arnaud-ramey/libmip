                  +----------------------+
                  |       libmip         |
                  +----------------------+

libmip is a library for using WoWWee MiP robots in C++ programs.
It has been designed as a lightweight and easy-to-use library.
It gives you the possibility to both:
* send orders to the robot, for instance, move forward or play sounds;
* read sensors, for instance the proximity sensor or the state of the LED lights.

libmip uses the Bluetooth Low Energy (BTLE, part of Bluetooth 4.0)
protocol for communication with the robot.
Your computer might not support it natively, in which case you need to
use a BTLE dongle.
Underneath, the Bluetooth commands and orders are structured as GATT operations
( https://en.wikipedia.org/wiki/Bluetooth_low_energy#GATT_Operations ).

The commands are based on the MiP BLE protocol, released by WoWWee.
See https://github.com/WowWeeLabs/MiP-BLE-Protocol

The GATT library is libgatt:
https://github.com/jacklund/libgatt
This is simply the [BlueZ 5.7](http://www.bluez.org/) GATT/LE
code extracted into a library
since they didn't see fit to include it in their bluetooth library).

The koystick sample is powered thanks to the joystick project of drewnoakes:
https://github.com/drewnoakes/joystick
It is a minimal C++ object-oriented API onto joystick devices under Linux.

License :                  see the LICENSE file.
Authors :                  see the AUTHORS file.
How to build the program:  see the INSTALL file.

________________________________________________________________________________

How to use the program
________________________________________________________________________________
Check out the sample executables in the "samples" folder.
A minimalistic sample using can be:

#include "src/bluetooth_mac2device.h"
#include "src/gattmip.h"
int main(int argc, char** argv) {
  GMainLoop *main_loop = g_main_loop_new(NULL, FALSE);
  Mip mip;
  std::string device_mac = (argc >= 2 ? argv[1] : "00:1A:7D:DA:71:11"),
      mip_mac = (argc >= 3 ? argv[2] : "D0:39:72:B7:AF:66");
  if (!mip.connect(main_loop, bluetooth_mac2device(device_mac).c_str(), mip_mac.c_str())) {
    printf("Could not connect with device MAC '%s' to MIP with MAC '%s'!\n",
           device_mac.c_str(), mip_mac.c_str());
    return -1;
  }
  // now the real stuff
  mip.distance_drive(.5, 0);
  mip.pump_up_callbacks();
  return 0;
}

